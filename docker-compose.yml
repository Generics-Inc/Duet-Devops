version: '3.9'

services:
  nginx:
    container_name: "${PROJECT_NAME}-nginx"
    image: nginx:stable
    restart: unless-stopped
    volumes:
      - ./nginx/nginx${INIT:-0}.conf:/etc/nginx/nginx.conf.template
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    env_file:
      - .env
    networks:
      - network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    command: /bin/bash -c "envsubst '$${DOMAIN} $${CLIENT_PORT} $${SERVER_PORT}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'"
  certbot:
    container_name: "${PROJECT_NAME}-certbot"
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  web:
    container_name: "${PROJECT_NAME}-web"
    restart: always
    env_file:
      - .env
    build:
      context: ./web
      dockerfile: ./docker/Dockerfile
    environment:
      - PORT=${CLIENT_PORT:-3000}
    networks:
      - network
    expose:
      - "3000"
    depends_on:
      - server
  server:
    container_name: "${PROJECT_NAME}-server"
    restart: always
    env_file:
      - .env
    build:
      context: ./server
      dockerfile: ./docker/containers/api/Dockerfile
    environment:
      - API_PORT=${SERVER_PORT:-4000}
    networks:
      - network
    expose:
      - "4000"
    depends_on:
      - db
      - minio
      - rabbitmq

  db:
    container_name: "${PROJECT_NAME}-db"
    image: postgres:13-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres-storage:/var/lib/postgresql/data
      - ./containers/db/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    networks:
      - network
    command: -p ${POSTGRES_PORT:-5432}
  minio:
    container_name: "${PROJECT_NAME}-minio"
    image: minio/minio
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    env_file:
      - .env
    volumes:
      - minio-storage:/data
    networks:
      - network
    command: server /data --console-address ":9001"
  rabbitmq:
    container_name: "${PROJECT_NAME}-rabbitmq"
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    ports:
      - "15672:15672"
    env_file:
      - .env
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 536870912
    volumes:
      - rabbitmq-storage:/var/lib/rabbitmq
    networks:
      - network

volumes:
  postgres-storage:
    name: "${PROJECT_NAME}-db"
  minio-storage:
    name: "${PROJECT_NAME}-minio"
  rabbitmq-storage:
    name: "${PROJECT_NAME}-rabbitmq"

networks:
  network:
    name: network
